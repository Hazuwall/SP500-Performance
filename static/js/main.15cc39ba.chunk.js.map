{"version":3,"sources":["TimeFrameSelector.js","BarColumn.js","BarChartPanel.js","App.js","serviceWorker.js","index.js"],"names":["TimeFrameSelector","props","defaultValue","onChange","value","BarColumn","positive","className","style","width","label","BarChartPanel","itemList","items","map","t","unit","scale","name","App","useState","timeFrames","state","setState","index","setIndex","timerID","setTimerID","startUpdateStateTimer","fetch","then","response","json","data","tempData","Object","values","shift","timeFrame","entries","key","val","change","parseFloat","Math","abs","push","retrieveState","setTimeout","catch","error","console","log","useEffect","clearTimeout","e","Number","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.15cc39ba.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TimeFrameSelector = (props) => {\n  return (\n    <form>\n      <select defaultValue=\"0\" onChange={props.onChange}>\n        <option value=\"0\">Real-Time</option>\n        <option value=\"1\">1 Day</option>\n        <option value=\"2\">5 Days</option>\n        <option value=\"3\">1 Month</option>\n        <option value=\"4\">3 Months</option>\n        <option value=\"5\">Year-To-Date</option>\n        <option value=\"6\">1 Year</option>\n        <option value=\"7\">3 Years</option>\n        <option value=\"8\">5 Years</option>\n        <option value=\"9\">10 Years</option>\n      </select>\n    </form>\n  );\n};\n\nexport default TimeFrameSelector;\n","import React from \"react\";\nimport \"./BarColumn.css\";\n\nconst BarColumn = (props) => {\n  if (props.positive ^ (props.value > 0)) {\n    return <td className=\"bar-col\"></td>;\n  }\n  if (props.positive) {\n    return (\n      <td className=\"bar-col bar-col_pos\">\n        <div\n          className=\"bar bar_pos\"\n          style={{\n            width: props.value * 60 + \"%\",\n          }}\n        ></div>\n        <span>{props.label}</span>\n      </td>\n    );\n  } else {\n    return (\n      <td className=\"bar-col bar-col_neg\">\n        <span>{props.label}</span>\n        <div\n          className=\"bar bar_neg\"\n          style={{\n            width: -props.value * 60 + \"%\",\n          }}\n        ></div>\n      </td>\n    );\n  }\n};\n\nexport default BarColumn;\n","import React from \"react\";\nimport BarColumn from \"./BarColumn\";\nimport \"./BarChartPanel.css\";\n\nconst BarChartPanel = (props) => {\n  const itemList = props.items.map((t) => (\n    <tr>\n      <BarColumn\n        label={t.value + props.unit}\n        value={t.value / props.scale}\n        positive={false}\n      />\n      <td>{t.name}</td>\n      <BarColumn\n        label={t.value + props.unit}\n        value={t.value / props.scale}\n        positive={true}\n      />\n    </tr>\n  ));\n  return (\n    <table className=\"bar-chart-panel\">\n      <tbody>{itemList}</tbody>\n    </table>\n  );\n};\n\nexport default BarChartPanel;\n","import React, { useState, useEffect } from \"react\";\nimport TimeFrameSelector from \"./TimeFrameSelector\";\nimport BarChartPanel from \"./BarChartPanel\";\nimport \"./App.css\";\n\nfunction App() {\n  const [state, setState] = useState({\n    timeFrames: [{ items: [], scale: null }],\n  });\n  const [index, setIndex] = useState(0);\n  const [timerID, setTimerID] = useState(null);\n\n  const handleChange = (e) => {\n    setIndex(Number(e.target.value));\n  };\n\n  function retrieveState(data) {\n    const tempData = Object.values(data);\n    tempData.shift();\n\n    const timeFrames = [];\n    for (const timeFrame of tempData) {\n      const items = [];\n      let scale = 0.0001;\n      for (const [key, val] of Object.entries(timeFrame)) {\n        const change = parseFloat(val);\n        if (Math.abs(change) > scale) {\n          scale = Math.abs(change);\n        }\n\n        items.push({\n          name: key,\n          value: change,\n        });\n      }\n      timeFrames.push({ items, scale });\n    }\n    return { timeFrames };\n  }\n\n  function startUpdateStateTimer() {\n    fetch(\"https://www.alphavantage.co/query?function=SECTOR&apikey=demo\")\n      .then((response) => response.json())\n      .then((data) => {\n        setState(retrieveState(data));\n        setTimerID(setTimeout(startUpdateStateTimer, 10000));\n      })\n      .catch((error) => console.log(\"error\", error));\n  }\n\n  useEffect(() => {\n    startUpdateStateTimer();\n    return () => clearTimeout(timerID);\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <h1>S&amp;P 500 Sector Performance</h1>\n      <TimeFrameSelector onChange={handleChange} />\n      <BarChartPanel\n        scale={state.timeFrames[index].scale}\n        items={state.timeFrames[index].items}\n        unit=\"%\"\n      />\n      <p className=\"copyright\">Data are provided by Alpha Vantage Inc.</p>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}